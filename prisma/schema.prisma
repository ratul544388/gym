generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

model User {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique
  name   String
  email  String
  image  String
  role   Role   @default(USER)

  questions Faq[]
}

model MembershipPlan {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  name            String @unique
  durationInMonth Int    @unique
  price           Int    @unique

  members Member[]
  renews  Renew[]

  benefitIds String[]  @db.ObjectId
  benefits   Benefit[] @relation(fields: [benefitIds], references: [id])
}

model Benefit {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title String

  membershipPlanIds String[]         @db.ObjectId
  membershipPlans   MembershipPlan[] @relation(fields: [membershipPlanIds], references: [id])
}

model Member {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  phone     String   @unique
  gender    Gender
  email     String?
  address   String
  age       Int
  image     String?
  startDate DateTime
  endDate   DateTime
  cost      Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  membershipPlan   MembershipPlan @relation(fields: [membershipPlanId], references: [id])
  membershipPlanId String         @db.ObjectId
  isPaid           Boolean        @default(false)

  renews Renew[]
}

model Renew {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId String @db.ObjectId

  cost      Int
  createdAt DateTime @default(now())

  membershipPlan   MembershipPlan @relation(fields: [membershipPlanId], references: [id], onDelete: Cascade)
  membershipPlanId String         @db.ObjectId
}

model DefaultSettings {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  admissionFee Int
  savedRevenue Int    @default(0)
}

model Faq {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  question  String
  answer    String?
  createdAt DateTime @default(now())

  isSelected Boolean @default(false)
  isPinned   Boolean @default(false)

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId
}

enum Gender {
  MALE
  FEMALE
}
